#!/bin/sh
#
# $NetBSD: network,v 1.69 2014/10/14 20:49:47 christos Exp $
#

# PROVIDE: network
# REQUIRE: root sysctl mountall
# BEFORE:  NETWORKING

$_rc_subr_loaded . /etc/rc.subr

name="network"
start_cmd="network_start"
stop_cmd="network_stop"

nl='
' # a newline

intmissing()
{
	local int="$1"
	shift
	for i; do
		if [ "$int" = "$i" ]; then
			return 1
		fi
	done
	return 0
}

network_start()
{
	# set hostname, turn on network
	#
	echo "Starting network."

	network_start_hostname
	network_start_domainname
	network_start_loopback
	network_start_interfaces
	network_start_aliases
	network_start_defaultroute
	network_start_defaultroute6
	network_start_local
}

network_start_hostname()
{
	# If $hostname is set, use it for my Internet name,
	# otherwise use /etc/myname
	#
	if [ -z "$hostname" ] && [ -f /etc/myname ]; then
		hostname=$(cat /etc/myname)
	fi
	if [ -n "$hostname" ]; then
		echo "Hostname: $hostname"
		hostname $hostname
	else
		# Don't warn about it if we're going to run
		# DHCP later, as we will probably get the
		# hostname at that time.
		#
		if ! checkyesno dhclient && ! checkyesno udhcpc && \
			[ -z "$(hostname)" ]
		then
			warn "\$hostname not set."
		fi
	fi
}

network_start_domainname()
{
	# Check $domainname first, then /etc/defaultdomain,
	# for NIS/YP domain name
	#
	if [ -z "$domainname" ] && [ -f /etc/defaultdomain ]; then
		domainname=$(cat /etc/defaultdomain)
	fi
	if [ -n "$domainname" ]; then
		echo "NIS domainname: $domainname"
		domainname $domainname
	fi

	# Flush all routes just to make sure it is clean
	if checkyesno flushroutes; then
		/sbin/ip route flush table all
	fi
}

network_start_loopback()
{
	# Set the address for the first loopback interface, so that the
	# auto-route from a newly configured interface's address to lo0
	# works correctly.
	#
	# NOTE: obscure networking problems will occur if lo0 isn't configured.
	#
	ip address add 127.0.0.1/8 dev lo broadcast + && \
		ip link set lo up

	# According to RFC1122, 127.0.0.0/8 must not leave the node.
	#
	ip route append prohibit 127.0.0.0/8 && \
		ip route append 127.0.0.0/8 via 127.0.0.1
}

network_start_interfaces()
{
	# Configure all of the network interfaces listed in $net_interfaces;
	# if $auto_ifconfig is YES, grab all interfaces from ifconfig.
	# In the following, "xxN" stands in for interface names, like "le0".
	#
	# For any interfaces that has an $ifconfig_xxN variable
	# associated, we break it into lines using ';' as a separator,
	# then process it just like the contents of an /etc/ifconfig.xxN
	# file.
	#
	# For each line from the $ifconfig_xxN variable or the
	# /etc/ifconfig.xxN file, we ignore comments and blank lines,
	# treat lines beginning with "!" as commands to execute, treat
	# "dhcp" as a special case to invoke udhcpc, and for any other
	# line we run "ifconfig xxN", using each line of the file as the
	# arguments for a separate "ifconfig" invocation.
	#
	# In order to configure an interface reasonably, you at the very least
	# need to specify "[addr_family] [hostname]" (e.g "inet my.domain.org"),
	# and probably a netmask (as in "netmask 0xffffffe0"). You will
	# frequently need to specify a media type, as in "media UTP", for
	# interface cards with multiple media connections that do not
	# autoconfigure. See the ifconfig manual page for details.
	#
	# Note that /etc/ifconfig.xxN takes multiple lines.  The following
	# configuration is possible:
	#	inet 10.1.1.1 netmask 0xffffff00
	#	inet 10.1.1.2 netmask 0xffffff00 alias
	#	inet6 2001:db8::1 prefixlen 64 alias
	#
	# You can put shell script fragment into /etc/ifconfig.xxN by
	# starting a line with "!".  Refer to ifconfig.if(5) for details.
	#
	if checkyesno auto_ifconfig; then
		ifaces="$(ls -1 /sys/class/net)"
		tmp="$ifaces"
	else
		tmp="$net_interfaces"
	fi
	echo -n 'Configuring network interfaces:'
	for int in $tmp; do
		eval argslist=\$ifconfig_$int

		# Skip interfaces that do not have explicit
		# configuration information.  If auto_ifconfig is
		# false then also warn about such interfaces.
		#
		if [ -z "$argslist" ] && ! [ -f /etc/ifconfig.$int ]
		then
			if ! checkyesno auto_ifconfig; then
				echo
				warn \
		"/etc/ifconfig.$int missing and ifconfig_$int not set;"
				warn "interface $int not configured."
			fi
			continue
		fi

		echo -n " $int"

		# Create the interface if necessary.
		# If the interface did not exist before,
		# then also resync ipf(4).
		#
		if intmissing $int $ifaces; then
			if /sbin/ifconfig $int create && \
			   checkyesno ipfilter; then
				/sbin/ipf -y >/dev/null
			fi
		fi

		# If $ifconfig_xxN is empty, then use
		# /etc/ifconfig.xxN, which we know exists due to
		# an earlier test.
		#
		# If $ifconfig_xxN is non-empty and contains a
		# newline, then just use it as is.  (This allows
		# semicolons through unmolested.)
		#
		# If $ifconfig_xxN is non-empty and does not
		# contain a newline, then convert all semicolons
		# to newlines.
		#
		case "$argslist" in
		'')
			cat /etc/ifconfig.$int
			;;
		*"${nl}"*)
			echo "$argslist"
			;;
		*)
			(
				set -o noglob
				IFS=';'; set -- $argslist
				#echo >&2 "[$#] [$1] [$2] [$3] [$4]"
				IFS="$nl"; echo "$*"
			)
			;;
		esac |
		collapse_backslash_newline |
		while read -r args; do
			case "$args" in
			''|"#"*|create)
				;;
			"!"*)
				# Run arbitrary command in a subshell.
				( eval "${args#*!}" )
				;;
			dhcp)
				if ! checkyesno udhcpc; then
					/sbin/udhcpc \
						${udhcpc_flags} -i $int \
						-p /var/run/udhcpc-${int}.pid >/dev/null
				fi
				;;
			dhcp6)
				if ! checkyesno udhcpc6; then
					/usr/bin/udhcpc6 \
						${udhcpc6_flags} -i $int \
						-p /var/run/udhcpc6-${int}.pid >/dev/null
				fi
				;;
			*)
				# Pass args to ifconfig.  Note
				# that args may contain embedded
				# shell metacharacters, such as
				# "ssid 'foo;*>bar'". We eval
				# one more time so that things
				# like ssid "Columbia University" work.
				(
					set -o noglob
					eval set -- $args
					#echo >&2 "[$#] [$1] [$2] [$3]"
					/sbin/ifconfig $int "$@"
				)
				;;
			esac
		done
		configured_interfaces="$configured_interfaces $int"
	done
	echo "."
}

network_start_aliases()
{
	echo -n "Adding interface aliases:"

	# Check if each configured interface xxN has an $ifaliases_xxN variable
	# associated, then configure additional IP addresses for that interface.
	# The variable contains a list of "address netmask" pairs, with
	# "netmask" set to "-" if the interface default netmask is to be used.
	#
	# Note that $ifaliases_xxN works only in certain cases and its
	# use is not recommended.  Use /etc/ifconfig.xxN or multiple
	# commands in $ifconfig_xxN instead.
	#
	for int in lo0 $configured_interfaces; do
		eval args=\$ifaliases_$int
		if [ -n "$args" ]; then
			set -- $args
			while [ $# -ge 2 ]; do
				addr=$1 ; net=$2 ; shift 2
				if [ "$net" = "-" ]; then
					# for compatibility only, obsolete
					/sbin/ifconfig $int inet alias $addr
				else
					/sbin/ifconfig $int inet alias $addr \
					    netmask $net
				fi
				echo -n " $int:$addr"
			done
		fi
	done

	# /etc/ifaliases, if it exists, contains the names of additional IP
	# addresses for each interface. It is formatted as a series of lines
	# that contain
	#	address interface netmask
	#
	# Note that /etc/ifaliases works only in certain cases and its
	# use is not recommended.  Use /etc/ifconfig.xxN or multiple
	# commands in $ifconfig_xxN instead.
	#
	if [ -f /etc/ifaliases ]; then
		while read addr int net; do
			if [ -z "$net" ]; then
				# for compatibility only, obsolete
				/sbin/ifconfig $int inet alias $addr
			else
				/sbin/ifconfig $int inet alias $addr netmask $net
			fi
		done < /etc/ifaliases
	fi

	echo "." # for "Adding interface aliases:"
}

network_start_defaultroute()
{
	# Check $defaultroute, then /etc/mygate, for the name or address
	# of my IPv4 gateway host. If using a name, that name must be in
	# /etc/hosts.
	#
	if [ -z "$defaultroute" ] && [ -f /etc/mygate ]; then
		defaultroute=$(cat /etc/mygate)
	fi
	if [ -n "$defaultroute" ]; then
		ip route add default via $defaultroute 
	fi
}

network_start_defaultroute6()
{
	# Check $defaultroute6, then /etc/mygate6, for the name or address
	# of my IPv6 gateway host. If using a name, that name must be in
	# /etc/hosts.  Note that the gateway host address must be a link-local
	# address if it is not using an stf* interface.
	#
	if [ -z "$defaultroute6" ] && [ -f /etc/mygate6 ]; then
		defaultroute6=$(cat /etc/mygate6)
	fi
	if [ -n "$defaultroute6" ]; then
		if [ "$ip6mode" = "autohost" ]; then
			echo
			warn \
	    "ip6mode is set to 'autohost' and a v6 default route is also set."
		fi
		/sbin/route add -inet6 default $defaultroute6
	fi
}

network_start_local()
{
	# XXX this must die
	if [ -s /etc/netstart.local ]; then
		sh /etc/netstart.local start
	fi
}

network_stop()
{
	echo "Stopping network."

	network_stop_local
	network_stop_aliases
	[ "$net_interfaces" != NO ] &&
	network_stop_interfaces
	network_stop_loopback
	network_stop_route
}

network_stop_local()
{
	# XXX this must die
	if [ -s /etc/netstart.local ]; then
		sh /etc/netstart.local stop
	fi
}

network_stop_aliases()
{
	echo "Deleting aliases."
	if [ -f /etc/ifaliases ]; then
		while read addr int net; do
			/sbin/ifconfig $int inet delete $addr
		done < /etc/ifaliases
	fi

	for int in $(ls -1 /sys/class/net); do
		eval args=\$ifaliases_$int
		if [ -n "$args" ]; then
			set -- $args
			while [ $# -ge 2 ]; do
				addr=$1 ; net=$2 ; shift 2
				/sbin/ifconfig $int inet delete $addr
			done
		fi
	done
}

network_stop_loopback()
{
	ip route delete prohibit 127.0.0.0/8 && \
		ip route delete 127.0.0.0/8 via 127.0.0.1
	ip address delete 127.0.0.1/8 dev lo broadcast + && \
		ip link set lo down
}

network_stop_interfaces()
{
	# down interfaces
	#
	echo -n 'Downing network interfaces:'
	if checkyesno auto_ifconfig; then
		tmp=$(ls -1 /sys/class/net)
	else
		tmp="$net_interfaces"
	fi
	for int in $tmp; do
		eval args=\$ifconfig_$int
		if [ -n "$args" ] || [ -f /etc/ifconfig.$int ]; then
			echo -n " $int"
			if [ -f /var/run/udhcpc-${int}.pid ]; then
				kill $(cat /var/run/udhcpc-${int}.pid) 2> /dev/null
			fi
			if [ -f /var/run/udhcpc6-${int}.pid ]; then
				kill $(cat /var/run/udhcpc6-${int}.pid) 2> /dev/null
			fi
			ip link set dev $int down
		fi
	done
	echo "."
}

network_stop_route()
{
	# flush routes
	#
	/sbin/ip route flush table all
}

load_rc_config $name
load_rc_config_var udhcpc udhcpc
load_rc_config_var udhcpc6 udhcpc6
load_rc_config_var ipfilter ipfilter
run_rc_command "$1"
