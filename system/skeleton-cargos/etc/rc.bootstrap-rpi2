#!/bin/bash

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/pkg/bin
export PATH

export TERM=xterm-color

network_tmp=$(mktemp 2>/dev/null)
 
trap "rm -f $network_tmp" 0 1 2 5 15

TITLE_PREFIX="CargOS Setup"
_sdisks=""

# Default to dhcp
_snic=""
_hostname="cargos.localdomain"
_ipaddr="dhcp"
_mask="255.255.255.0"
_gw=""
_kmap=""

# Default to OpenDNS
_pri_ns="208.67.220.220"
_sec_ns="208.67.222.222"

_install_log="/tmp/install.log"

# Based on the machine type, lookup the associated CargOS platform name.
# XXX: This currently assumes all ARMv7s are rpi2 which is easier for
# the time being, but will not hold true when other boards are added.
_arch=$(uname -m | sed -e 's/armv7l/rpi2/')

# Tests whether entire string is a number.
isdigit() {
	[ $# -eq 1 ] || return 1

	case $1 in
  	*[!0-9]*|"") return 1;;
	*) return 0;;
	esac
}

# Tests network numner (num.num.num.num)
is_inet() {
	NET=$1

	OLDIFS=$IFS
	IFS=.
	set -- $NET
	a=$1
	b=$2
	c=$3
	d=$4
	IFS=$OLDIFS

	isdigit "$a" || return 1
	isdigit "$b" || return 1
	isdigit "$c" || return 1
	isdigit "$d" || return 1

	[ -z $a ] && return 1
	[ -z $b ] && return 1
	[ -z $c ] && return 1
	[ -z $d ] && return 1

	[ $a -lt 0 ] && return 1
	[ $a -gt 255 ] && return 1
	[ $b -lt 0 ] && return 1
	[ $b -gt 255 ] && return 1
	[ $c -lt 0 ] && return 1
	[ $c -gt 255 ] && return 1
	[ $d -lt 0 ] && return 1
	# Make sure the last field isn't the broadcast addr.
	[ $d -ge 255 ] && return 1
	return 0
}

is_inet6() {
	local _address=$1
	local _o=""
	local _zeroes=""

	while [ "$_o" != "$_address" ]; do
		_o="$_address"

		# fill all words with zeroes
		_address="$( sed  's|:\([0-9a-f]\{3\}\):|:0\1:|g' <<< "$_address" )"
		_address="$( sed  's|:\([0-9a-f]\{3\}\)$|:0\1|g'  <<< "$_address")"
		_address="$( sed  's|^\([0-9a-f]\{3\}\):|0\1:|g'  <<< "$_address" )"

		_address="$( sed  's|:\([0-9a-f]\{2\}\):|:00\1:|g' <<< "$_address")"
		_address="$( sed  's|:\([0-9a-f]\{2\}\)$|:00\1|g'  <<< "$_address")"
		_address="$( sed  's|^\([0-9a-f]\{2\}\):|00\1:|g'  <<< "$_address")"

		_address="$( sed  's|:\([0-9a-f]\):|:000\1:|g'  <<< "$_address")"
		_address="$( sed  's|:\([0-9a-f]\)$|:000\1|g'   <<< "$_address")"
		_address="$( sed  's|^\([0-9a-f]\):|000\1:|g'   <<< "$_address")"
	done

	# now expand the ::
	grep -qs "::" <<< "$_address"
	if [ "$?" -eq 0 ]; then
		_grps="$(sed  's|[0-9a-f]||g' <<< "$_address" | wc -m)"
		((_grps--)) # carriage return
		((_missing=8-_grps))
		for ((i=0;i<$_missing;i++)); do
			_zeroes="$_zeroes:0000"
		done

		# be careful where to place the :
		_address="$( sed  's|\(.\)::\(.\)|\1'$_zeroes':\2|g'   <<< "$_address")"
		_address="$( sed  's|\(.\)::$|\1'$_zeroes':0000|g'   <<< "$_address")"
		_address="$( sed  's|^::\(.\)|'$_zeroes':0000:\1|g;s|^:||g'   <<< "$_address")"
	fi

	# an expanded address has 39 chars + CR
	[ $(echo $_address | wc -m) != 40 ] && return 1

	return 0
}

udev_trigger() {
	udevadm trigger --action=add
	udevadm settle || true
}

prompt_welcome() {
	local _message="
	You must answer the following questions to configure the system.
	You will have no chance to correct your answers, so please take
	your time and answer the questions correctly.

	If you select No, the system will work without persistent storage
	configuration.

	Would you like to continue with configuration?
	"

	dialog --backtitle "${TITLE_PREFIX}" \
		--title "Welcome to the CargOS Setup Utility" \
		--yesno "${_message}" 14 80
}

prompt_end() {
	local _message="
	System configuration has been completed. Thank you for using CargOS!
	"
	dialog --backtitle "${TITLE_PREFIX}" \
		--title "CargOS Setup Utility" \
		--msgbox "${_message}" 7 75
}

create_network_config() {
	echo "hostname=\"$_hostname\"" >> /etc/rc.conf
	if [ ${_ipaddr} != "dhcp" ]; then
		echo "ifconfig_${_snic}=\"$_ipaddr$_mask\"" >> /etc/rc.conf
		is_inet6 $_gw && _d="defaultroute6" || _d="defaultroute"
		echo "${_d}=\"$_gw\"" >> /etc/rc.conf
		[ -z $_pri_ns ] || echo "nameserver $_pri_ns" > /etc/resolv.conf
		[ -z $_sec_ns ] || echo "nameserver $_sec_ns" >> /etc/resolv.conf
		echo "${_ipaddr}	${_hostname}" >> /etc/hosts
	else
		echo "ifconfig_${_snic}=\"$_ipaddr\"" >> /etc/rc.conf
	fi
	/etc/rc.d/network start >> ${_install_log} 2>&1
}

prompt_nic() {
	local _nic_cnt=0
	while IFS=: read -r id link extra; do
		((_nic_cnt++))
		_nics[$_nic_cnt]=$(echo $link | tr -d '[[:space:]]')
		_macs[$_nic_cnt]=$(ip link show $link | grep link | cut -d ' ' -f6 | sed 's/\\\:/:/g')
		_lst[$_nic_cnt]="${_nics[${_nic_cnt}]} ${_macs[$_nic_cnt]}"
	done < <(ip link show | grep -v link | grep -v LOOPBACK 2>/dev/null)
	local _snicf=$(mktemp 2>/dev/null)
	dialog --backtitle "${TITLE_PREFIX} - Networking" \
		--title "List of usable network interfaces" \
		--menu "Select one interface to configure" 15 80 17 \
		${_lst[@]} 2>${_snicf}
	_snic=$(cat ${_snicf})
	rm -f ${_snicf}
	[ -z ${_snic} ] && return 1
	_hostname=$(ip link show ${_snic} | grep link | cut -d ' ' -f6 | sed 's/:/-/g')
	dialog --backtitle "${TITLE_PREFIX} - Networking" \
		--title "Configuration for ${_snic}" \
		--ok-label "Save" \
		--form "Please enter your desired configuration" \
		15 70 0 \
		"Hostname" 1 1 "$_hostname"			1 32 32 0 \
		"IPv(4|6) Address or 'dhcp(6)'" 2 1 "$_ipaddr"	2 32 32 0 \
		"Network mask or prefix" 3 1 "$_mask"		3 32 32 0 \
		"Default gateway" 4 1 "$_gw"			4 32 32 0 \
		"Primary DNS server" 5 1 "$_pri_ns"		5 32 32 0 \
		"Secondary DNS server" 6 1 "$_sec_ns"		6 32 32 0 \
		2> ${network_tmp}

	_hostname=$(sed -n "1p" ${network_tmp})
	_ipaddr=$(sed -n "2p" ${network_tmp})
	_mask=$(sed -n "3p" ${network_tmp})
	_gw=$(sed -n "4p" ${network_tmp})
	_pri_ns=$(sed -n "5p" ${network_tmp})
	_sec_ns=$(sed -n "6p" ${network_tmp})

	if [ ${_ipaddr} != "dhcp" ]; then
		[ -z ${_ipaddr} ] && return 1 || is_inet ${_ipaddr} || is_inet6 ${_ipaddr} || return 1
		[ -z ${_mask} ] && return 1 || is_inet ${_mask} && _mask=" netmask ${_mask}"
		[ -z ${_gw} ] && return 1 || is_inet ${_gw} || is_inet6 ${_gw} || return 1
	else
		_mask=""
		_gw=""
		_pri_ns=""
		_sec_ns=""
	fi
}

prompt_disk() {
	local _sdisks=/dev/mmcblk0
	local _message="
	Your BTRFS filesystem will be created with the following disk(s):
	${_sdisks}
	
	This will erase *ALL DATA* on the disk(s)! Do you want to continue?	
	"

	dialog --backtitle "${TITLE_PREFIX} - Storage" \
		--title "!!! WARNING !!!" \
		--yesno "${_message}" 11 72
	[ $? -ne 0 ] && return 1 || return 0
}

create_persistent() {
	local _cmds
	_cmds[0]="fdisk"
	_cmds[1]="mkfs_btrfs"
	_cmds[2]="mount"
	_cmds[3]="bootstrap"
	_cmds[4]="random-seed"

	local _dev=/dev/mmcblk0

	n=${#_cmds[*]}; 
	i=0
	for f in "${_cmds[@]}"
	do
		local _pct=$(( 100*(++i)/n ))
		echo ${_pct}
		case ${f} in
		fdisk)
			echo -n "n.p.....w." | tr . "\n" | fdisk ${_dev} >> ${_install_log} 2>&1
			;;
		mkfs_btrfs)
			{
			_parts=$(ls -1 ${_dev}* | tail -1)
			mkfs.btrfs -L cargos ${_parts}
			udev_trigger
			local _uuid=$(MALLOC_CHECK_=0 btrfs fi show | grep uuid | cut -d ':' -f3 | tr -d '[[:space:]]')
			mount /dev/disk/by-uuid/$_uuid /mnt
			(cd /mnt; btrfs subvolume create root)
			(cd /mnt; btrfs subvolume create pkg)
			(cd /mnt; btrfs subvolume create etc)
			(cd /mnt; btrfs subvolume create home)
			(cd /mnt; btrfs subvolume create data)
			(cd /mnt; btrfs subvolume create data/docker)
			umount -f /mnt
			} >> ${_install_log} 2>&1
			;;
		mount)
			{
			local _uuid=$(MALLOC_CHECK_=0 btrfs fi show | grep uuid | cut -d ':' -f3 | tr -d '[[:space:]]')
			mount /dev/disk/by-uuid/$_uuid /cargos
			mount -o subvol=pkg /dev/disk/by-uuid/$_uuid /usr/pkg
			mount -o subvol=root /dev/disk/by-uuid/$_uuid /root
			mount -o subvol=etc /dev/disk/by-uuid/$_uuid /etc
			mount -o subvol=home /dev/disk/by-uuid/$_uuid /home
			mount -o subvol=data/docker /dev/disk/by-uuid/$_uuid /var/lib/docker
			unionfs -o allow_other,cow,use_ino,nonempty /cargos/etc=RW:/.etc=RO /etc
			} >> ${_install_log} 2>&1
			;;
		bootstrap)
			{
			local _version=$(cat /etc/cargos-release)
			/bin/gzip -d < /var/db/bootstrap-cargos-${_version}-${_arch}.tar.gz | /bin/tar xhf - -C /
			/bin/bash /usr/pkg/.install/bootstrap.sh
			rm -rf /usr/pkg/.install
			} >> ${_install_log} 2>&1
			;;
		random-seed)
			{
			(dmesg; sysctl -a; ifconfig -a; df; hostname) >/dev/urandom 2>&1
			dd if=/dev/urandom of=/etc/random-seed bs=512 count=1 2>/dev/null
			chmod 600 /etc/random-seed
			} >> ${_install_log} 2>&1
			;;
		esac
	done | \
	dialog --backtitle "${TITLE_PREFIX} - Storage" \
		--title "Creating persistent storage" \
		--gauge "Creating BTRFS filesystem and bootstrapping the system..." 10 70
}

change_root_password() {
	local _password _password_re
	local _passwordf=$(mktemp 2>/dev/null)
	local _password_ref=$(mktemp 2>/dev/null)
	dialog --backtitle "${TITLE_PREFIX} - Root password" \
		--title "Password" \
		--clear \
		--insecure \
		--passwordbox "Enter root's password" 10 30 2>${_passwordf}

	dialog --backtitle "${TITLE_PREFIX} - Root password" \
		--title "Retype password" \
		--clear \
		--insecure \
		--passwordbox "Retype root's password" 10 30 2>${_password_ref}

	_password=$(cat ${_passwordf})
	_password_re=$(cat ${_password_ref})
	rm -f ${_passwordf} ${_passwordf_ref}

	[ X"${_password}" != X"${_password_re}" ] && return 1

	passwd >/dev/null 2>&1 << EOF
${_password}
${_password_re}
EOF
}

# test the first argument against the remaining ones, return success on a match
isin() {
	local   _a=$1 _b
	shift
	for _b; do
		[[ $_a == $_b ]] && return 0
	done
	return 1
}

save_kmap() {
	[ -z $_kmap ] || echo "kbdmap=\"$_kmap\"" >> /etc/rc.conf
}

prompt_kmap() {
	local _message="
	Would you like to change the default keymap from the default?
	"
	dialog --backtitle "${TITLE_PREFIX} - Keyboard map" \
		--title "Default keymap" \
		--yesno "${_message}" 7 70
	[ $? -ne 0 ] && return 0
	local _kmapfile=/tmp/kmaplist

	(cd /usr/share/kmap;
		find . | sed 's,\./,,g' | grep kmap | sort | sed 's,.kmap,,g' >${_kmapfile})

	local _respf=$(mktemp 2>/dev/null)
	local _k_cnt=0
	for _k in $(cat ${_kmapfile}); do
		((_k_cnt++))
		_klist[$_k_cnt]="${_k} ${_k}"
	done
	dialog --backtitle "${TITLE_PREFIX} - Keyboard map" \
		--title "Keyboard map selection" \
		--menu "Choose an option" 20 78 16 \
		${_klist[@]} 2>${_respf}
	_kmap=$(cat ${_respf})
	rm -f ${_respf}

	rm -f ${_kmapfile}

	[ -z $_kmap ] || loadkmap < /usr/share/kmap/${_kmap}.kmap
}

set_timezone() {
	local _zonefile=/tmp/tzlist _zonepath _zsed _tz _zoneroot=/usr/share/zoneinfo

	(cd /usr/share/zoneinfo/posix;
		ls -1dF $(tar cvf /dev/null [A-Za-y]*) >${_zonefile})

	# If the timezone file is not available,
	# return immediately.

	[[ ! -f $_zonefile ]] && return

	# If configured in a previous call, return immediately
	[[ -n $TZ ]] && return

	if [[ -h /etc/localtime ]]; then
		TZ=$(ls -l /etc/localtime 2>/dev/null)
		TZ=${TZ#*${_zoneroot#/mnt}/}
	fi

	while :; do
		local _respf=$(mktemp 2>/dev/null)
		dialog --backtitle "${TITLE_PREFIX} - Timezone" \
			--title "Timezone" \
			--inputbox "What timezone are you in? ('?' for list)" 10 60 2>${_respf}
		local _resp=$(cat ${_respf})
		rm -f ${_respf}

		_zonepath=${_resp%%*(/)}
		case $_zonepath in
		"")	continue;;
		"?")
			local _respf=$(mktemp 2>/dev/null)
			local _z_cnt=0
			for _z in $(cat ${_zonefile} | cut -d '/' -f1 | uniq | sort); do
				((_z_cnt++))
				_zlist[$_z_cnt]="${_z} ${_z}"
			done
			dialog --backtitle "${TITLE_PREFIX} - Timzone" \
				--title "Timezone selection" \
				--menu "Choose an option" 20 78 16 \
				${_zlist[@]} 2>${_respf}
			_zonepath=$(cat ${_respf})
			rm -f ${_respf}
			;;
		esac

		while isin "$_zonepath//" $(cat $_zonefile); do
			_zsed=$(echo $_zonepath/ | sed 's,/,\\/,g')
			local _respf=$(mktemp 2>/dev/null)
			dialog --backtitle "${TITLE_PREFIX} - Timezone selection" \
				--title "Timezone selection" \
				--inputbox "What sub-timezone of '$_zonepath' are you in? ('?' for list)" 10 60 2>${_respf}
			local _resp=$(cat ${_respf})
			rm -f ${_respf}
			_resp=${_resp%%*(/)}
			case $_resp in
			"")	;;
			"?")
				local _respf=$(mktemp 2>/dev/null)
				local _z_cnt=0
				for _z in $(sed -n "/^$_zsed/{s/$_zsed//;/\/./!p;}" $_zonefile); do
					((_z_cnt++))
					_zslist[$_z_cnt]="${_z} ${_z}"
				done
				dialog --backtitle "${TITLE_PREFIX} - Timezone" \
					--title "Timezone selection" \
					--menu "Choose an option" 20 78 16 \
					${_zslist[@]} 2>${_respf}
				local _resp=$(cat ${_respf})
				rm -f ${_respf}
				_zonepath=$_zonepath/$_resp
				;;
			*)	_zonepath=$_zonepath/$_resp;;
			esac
		done

		if isin "$_zonepath" $(cat $_zonefile); then
			TZ=${_zonepath#$_zoneroot}
			ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
			return
		fi

		echo -n "'${_zonepath}'"
		echo " is not a valid timezone on this system."
	done

	rm -f ${_zonefile}
}

while [ /usr/bin/true ]; do
	prompt_welcome
	[ $? -ne 0 ] && exit 1
	prompt_kmap
	while true; do prompt_nic && break ; done
	while true; do prompt_disk && break ; done
	create_persistent
	create_network_config
	while true ; do change_root_password && break ; done
	set_timezone
	save_kmap

	/etc/rc.d/network stop >/dev/null 2>&1

	prompt_end

	break
done
